/* eslint no-console: "off" */
//Require necessary modules and initailized variables
var asynckit = require('./')
  , async    = require('async')
  , assert   = require('assert')
  , expected = 0
  ;
//Require the 'Benchmark' Module and create a new benchmark suite
var Benchmark = require('benchmark');
var suite = new Benchmark.Suite;

// Create an array 'source' containing numbers from 1 to 99 and calculate the expected sum
var source = [];
for (var z = 1; z < 100; z++)
{
  source.push(z);
  expected += z;
}

// Add the 'async.map' test to the benchmark suite
suite
// add tests

.add('async.map', function(deferred)
{
  var total = 0;

  // Use async.map to iterate over the 'source' array asynchronously
  async.map(source,
  function(i, cb)
  {
    setImmediate(function()
    {
      total += i;
      cb(null, total);
    });
  },
  function(err, result)
  {
    assert.ifError(err);
    assert.equal(result[result.length - 1], expected);
    deferred.resolve();
  });
}, {'defer': true})

// Add the 'asynckit.parallel' test to the benchmark suite
.add('asynckit.parallel', function(deferred)
{
  var total = 0;

  // Use asynckit.parallel to iterate over the 'source' array asynchronously
  asynckit.parallel(source,
  function(i, cb)
  {
    setImmediate(function()
    {
      total += i;
      cb(null, total);
    });
  },
  function(err, result)
  {
    assert.ifError(err);
    assert.equal(result[result.length - 1], expected);
    deferred.resolve();
  });
}, {'defer': true})


// Add event listeners to the benchmark suite

// 'cycle' event: Triggered after each test cycle, prints the result of the cycle
.on('cycle', function(ev)
{
  console.log(String(ev.target));
})
// 'complete' event: Triggered when all tests have completed, prints the fastest test case
.on('complete', function()
{
  console.log('Fastest is ' + this.filter('fastest').map('name'));
})
// Run the benchmark suite asynchronously
.run({ 'async': true });
